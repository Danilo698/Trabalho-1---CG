#include <GL/glut.h>
#include <cmath>
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif


void drawCircle(float cx, float cy, float radius, int num_segments, float r, float g, float b) {
    glColor3f(r, g, b);
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(cx, cy);
    for (int i = 0; i <= num_segments; i++) {
        float theta = 2.0f * M_PI * float(i) / float(num_segments);
        float x = radius * cosf(theta);
        float y = radius * sinf(theta);
        glVertex2f(cx + x, cy + y);
    }
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Desenhando os círculos do maior para o menor
    drawCircle(0.0f, 0.0f, 0.8f, 100, 0.0f, 0.0f, 0.2f); // Azul escuro externo
    drawCircle(0.0f, 0.0f, 0.6f, 100, 0.0f, 0.0f, 0.4f); // Azul intermediário
    drawCircle(0.0f, 0.0f, 0.3f, 100, 0.0f, 0.0f, 0.2f); // Azul escuro interno
    drawCircle(0.0f, 0.0f, 0.1f, 100, 1.0f, 1.0f, 1.0f); // Branco no centro

    glFlush();
}

void init() {
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-1, 1, -1, 1);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Alvo em OpenGL");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
