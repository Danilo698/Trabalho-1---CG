// QUESTÃO 5
#include <GL/glut.h>
#include <cmath>
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

float angle = 0.0f; // Ângulo de rotação
const int num_segments = 100; // Número de segmentos para o círculo

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();

    glPushMatrix();
    glRotatef(angle, 0.0f, 0.0f, 1.0f); // Rotaciona o círculo

    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(0.0f, 0.0f);
    for (int i = 0; i <= num_segments; i++) {
        float theta = 2.0f * M_PI * float(i) / float(num_segments);
        float x = 0.3f * cos(theta);
        float y = 0.3f * sin(theta);
        glColor3f((cos(theta) + 1) / 2, (sin(theta) + 1) / 2, 1.0f); // Cores variadas
        glVertex2f(x, y);
    }
    glEnd();

    glPopMatrix();
    glFlush();
}

void update(int value) {
    angle -= 2.0f; // Rotação no sentido horário
    if (angle < -360.0f) angle += 360.0f;
    glutPostRedisplay();
    glutTimerFunc(16, update, 0); // Aproximadamente 60 FPS
}

void init() {
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f); // Fundo branco
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-1, 1, -1, 1);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Círculo Giratório");
    init();
    glutDisplayFunc(display);
    glutTimerFunc(16, update, 0);
    glutMainLoop();
    return 0;
}
